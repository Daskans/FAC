State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On SUB shift to state 1
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On EOF shift to state 16
-- On s shift to state 17
-- On main shift to state 19
## Reductions:

State 1:
## Known stack suffix:
## SUB
## LR(1) items:
s -> SUB . s [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 1
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On s shift to state 15
## Reductions:

State 2:
## Known stack suffix:
## LPAR
## LR(1) items:
s -> LPAR . s RPAR [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 1
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On s shift to state 4
## Reductions:

State 3:
## Known stack suffix:
## INT
## LR(1) items:
s -> INT . [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
## Reductions:
-- On SUB RPAR REC MUL EOF DIV ADD
--   reduce production s -> INT

State 4:
## Known stack suffix:
## LPAR s
## LR(1) items:
s -> s . ADD s [ SUB RPAR REC MUL DIV ADD ]
s -> s . SUB s [ SUB RPAR REC MUL DIV ADD ]
s -> s . MUL s [ SUB RPAR REC MUL DIV ADD ]
s -> s . DIV s [ SUB RPAR REC MUL DIV ADD ]
s -> s . REC [ SUB RPAR REC MUL DIV ADD ]
s -> LPAR s . RPAR [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 5
-- On RPAR shift to state 14
-- On REC shift to state 7
-- On MUL shift to state 8
-- On DIV shift to state 10
-- On ADD shift to state 12
## Reductions:

State 5:
## Known stack suffix:
## s SUB
## LR(1) items:
s -> s SUB . s [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 1
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On s shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## s SUB s
## LR(1) items:
s -> s . ADD s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . SUB s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s SUB s . [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . MUL s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . DIV s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . REC [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 5
-- On REC shift to state 7
-- On MUL shift to state 8
-- On DIV shift to state 10
-- On ADD shift to state 12
## Reductions:
-- On SUB RPAR REC MUL EOF DIV ADD
--   reduce production s -> s SUB s
** Conflict on SUB REC MUL DIV ADD

State 7:
## Known stack suffix:
## s REC
## LR(1) items:
s -> s REC . [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
## Reductions:
-- On SUB RPAR REC MUL EOF DIV ADD
--   reduce production s -> s REC

State 8:
## Known stack suffix:
## s MUL
## LR(1) items:
s -> s MUL . s [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 1
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On s shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## s MUL s
## LR(1) items:
s -> s . ADD s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . SUB s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . MUL s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s MUL s . [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . DIV s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . REC [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 5
-- On REC shift to state 7
-- On DIV shift to state 10
## Reductions:
-- On SUB RPAR REC MUL EOF DIV ADD
--   reduce production s -> s MUL s
** Conflict on SUB REC DIV

State 10:
## Known stack suffix:
## s DIV
## LR(1) items:
s -> s DIV . s [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 1
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On s shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## s DIV s
## LR(1) items:
s -> s . ADD s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . SUB s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . MUL s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . DIV s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s DIV s . [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . REC [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 5
-- On REC shift to state 7
-- On MUL shift to state 8
-- On DIV shift to state 10
-- On ADD shift to state 12
## Reductions:
-- On SUB RPAR REC MUL EOF DIV ADD
--   reduce production s -> s DIV s
** Conflict on SUB REC MUL DIV ADD

State 12:
## Known stack suffix:
## s ADD
## LR(1) items:
s -> s ADD . s [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 1
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On s shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## s ADD s
## LR(1) items:
s -> s . ADD s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s ADD s . [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . SUB s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . MUL s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . DIV s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . REC [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 5
-- On REC shift to state 7
-- On MUL shift to state 8
-- On DIV shift to state 10
## Reductions:
-- On SUB RPAR REC EOF DIV ADD
--   reduce production s -> s ADD s
** Conflict on SUB REC DIV

State 14:
## Known stack suffix:
## LPAR s RPAR
## LR(1) items:
s -> LPAR s RPAR . [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
## Reductions:
-- On SUB RPAR REC MUL EOF DIV ADD
--   reduce production s -> LPAR s RPAR

State 15:
## Known stack suffix:
## SUB s
## LR(1) items:
s -> s . ADD s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . SUB s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . MUL s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . DIV s [ SUB RPAR REC MUL EOF DIV ADD ]
s -> s . REC [ SUB RPAR REC MUL EOF DIV ADD ]
s -> SUB s . [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 5
-- On REC shift to state 7
-- On MUL shift to state 8
-- On DIV shift to state 10
-- On ADD shift to state 12
## Reductions:
-- On SUB RPAR REC MUL EOF DIV ADD
--   reduce production s -> SUB s
** Conflict on SUB REC MUL DIV ADD

State 16:
## Known stack suffix:
## EOF
## LR(1) items:
main -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> EOF

State 17:
## Known stack suffix:
## s
## LR(1) items:
main -> s . EOF [ # ]
s -> s . ADD s [ SUB REC MUL EOF DIV ADD ]
s -> s . SUB s [ SUB REC MUL EOF DIV ADD ]
s -> s . MUL s [ SUB REC MUL EOF DIV ADD ]
s -> s . DIV s [ SUB REC MUL EOF DIV ADD ]
s -> s . REC [ SUB REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 5
-- On REC shift to state 7
-- On MUL shift to state 8
-- On EOF shift to state 18
-- On DIV shift to state 10
-- On ADD shift to state 12
## Reductions:

State 18:
## Known stack suffix:
## s EOF
## LR(1) items:
main -> s EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> s EOF

State 19:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

