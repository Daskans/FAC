State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On SUB shift to state 1
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On EOF shift to state 16
-- On t shift to state 4
-- On main shift to state 17
-- On f shift to state 10
-- On e shift to state 18
## Reductions:

State 1:
## Known stack suffix:
## SUB
## LR(1) items:
e -> SUB . t [ RPAR EOF ADD ]
## Transitions:
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On t shift to state 15
-- On f shift to state 10
## Reductions:

State 2:
## Known stack suffix:
## LPAR
## LR(1) items:
f -> LPAR . e RPAR [ RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 1
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On t shift to state 4
-- On f shift to state 10
-- On e shift to state 11
## Reductions:

State 3:
## Known stack suffix:
## INT
## LR(1) items:
f -> INT . [ RPAR REC MUL EOF DIV ADD ]
## Transitions:
## Reductions:
-- On RPAR REC MUL EOF DIV ADD
--   reduce production f -> INT

State 4:
## Known stack suffix:
## t
## LR(1) items:
e -> t . [ RPAR EOF ADD ]
t -> t . MUL f [ RPAR REC MUL EOF DIV ADD ]
t -> t . DIV f [ RPAR REC MUL EOF DIV ADD ]
t -> t . REC [ RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On REC shift to state 5
-- On MUL shift to state 6
-- On DIV shift to state 8
## Reductions:
-- On RPAR EOF ADD
--   reduce production e -> t

State 5:
## Known stack suffix:
## t REC
## LR(1) items:
t -> t REC . [ RPAR REC MUL EOF DIV ADD ]
## Transitions:
## Reductions:
-- On RPAR REC MUL EOF DIV ADD
--   reduce production t -> t REC

State 6:
## Known stack suffix:
## t MUL
## LR(1) items:
t -> t MUL . f [ RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On f shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## t MUL f
## LR(1) items:
t -> t MUL f . [ RPAR REC MUL EOF DIV ADD ]
## Transitions:
## Reductions:
-- On RPAR REC MUL EOF DIV ADD
--   reduce production t -> t MUL f

State 8:
## Known stack suffix:
## t DIV
## LR(1) items:
t -> t DIV . f [ RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On f shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## t DIV f
## LR(1) items:
t -> t DIV f . [ RPAR REC MUL EOF DIV ADD ]
## Transitions:
## Reductions:
-- On RPAR REC MUL EOF DIV ADD
--   reduce production t -> t DIV f

State 10:
## Known stack suffix:
## f
## LR(1) items:
t -> f . [ RPAR REC MUL EOF DIV ADD ]
## Transitions:
## Reductions:
-- On RPAR REC MUL EOF DIV ADD
--   reduce production t -> f

State 11:
## Known stack suffix:
## LPAR e
## LR(1) items:
e -> e . ADD t [ RPAR ADD ]
f -> LPAR e . RPAR [ RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On RPAR shift to state 12
-- On ADD shift to state 13
## Reductions:

State 12:
## Known stack suffix:
## LPAR e RPAR
## LR(1) items:
f -> LPAR e RPAR . [ RPAR REC MUL EOF DIV ADD ]
## Transitions:
## Reductions:
-- On RPAR REC MUL EOF DIV ADD
--   reduce production f -> LPAR e RPAR

State 13:
## Known stack suffix:
## e ADD
## LR(1) items:
e -> e ADD . t [ RPAR EOF ADD ]
## Transitions:
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On t shift to state 14
-- On f shift to state 10
## Reductions:

State 14:
## Known stack suffix:
## e ADD t
## LR(1) items:
e -> e ADD t . [ RPAR EOF ADD ]
t -> t . MUL f [ RPAR REC MUL EOF DIV ADD ]
t -> t . DIV f [ RPAR REC MUL EOF DIV ADD ]
t -> t . REC [ RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On REC shift to state 5
-- On MUL shift to state 6
-- On DIV shift to state 8
## Reductions:
-- On RPAR EOF ADD
--   reduce production e -> e ADD t

State 15:
## Known stack suffix:
## SUB t
## LR(1) items:
e -> SUB t . [ RPAR EOF ADD ]
t -> t . MUL f [ RPAR REC MUL EOF DIV ADD ]
t -> t . DIV f [ RPAR REC MUL EOF DIV ADD ]
t -> t . REC [ RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On REC shift to state 5
-- On MUL shift to state 6
-- On DIV shift to state 8
## Reductions:
-- On RPAR EOF ADD
--   reduce production e -> SUB t

State 16:
## Known stack suffix:
## EOF
## LR(1) items:
main -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> EOF

State 17:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

State 18:
## Known stack suffix:
## e
## LR(1) items:
e -> e . ADD t [ EOF ADD ]
main -> e . EOF [ # ]
## Transitions:
-- On EOF shift to state 19
-- On ADD shift to state 13
## Reductions:

State 19:
## Known stack suffix:
## e EOF
## LR(1) items:
main -> e EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> e EOF

