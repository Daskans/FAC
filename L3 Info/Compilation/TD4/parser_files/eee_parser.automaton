State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On SUB shift to state 1
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On EOF shift to state 16
-- On main shift to state 17
-- On e shift to state 18
## Reductions:

State 1:
## Known stack suffix:
## SUB
## LR(1) items:
e -> SUB . e [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 1
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On e shift to state 15
## Reductions:

State 2:
## Known stack suffix:
## LPAR
## LR(1) items:
e -> LPAR . e RPAR [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 1
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On e shift to state 4
## Reductions:

State 3:
## Known stack suffix:
## INT
## LR(1) items:
e -> INT . [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
## Reductions:
-- On SUB RPAR REC MUL EOF DIV ADD
--   reduce production e -> INT

State 4:
## Known stack suffix:
## LPAR e
## LR(1) items:
e -> e . ADD e [ SUB RPAR REC MUL DIV ADD ]
e -> e . SUB e [ SUB RPAR REC MUL DIV ADD ]
e -> e . MUL e [ SUB RPAR REC MUL DIV ADD ]
e -> e . DIV e [ SUB RPAR REC MUL DIV ADD ]
e -> e . REC [ SUB RPAR REC MUL DIV ADD ]
e -> LPAR e . RPAR [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 5
-- On RPAR shift to state 12
-- On REC shift to state 7
-- On MUL shift to state 8
-- On DIV shift to state 10
-- On ADD shift to state 13
## Reductions:

State 5:
## Known stack suffix:
## e SUB
## LR(1) items:
e -> e SUB . e [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 1
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On e shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## e SUB e
## LR(1) items:
e -> e . ADD e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . SUB e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e SUB e . [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . MUL e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . DIV e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . REC [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On REC shift to state 7
-- On MUL shift to state 8
-- On DIV shift to state 10
## Reductions:
-- On SUB RPAR EOF ADD
--   reduce production e -> e SUB e

State 7:
## Known stack suffix:
## e REC
## LR(1) items:
e -> e REC . [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
## Reductions:
-- On SUB RPAR REC MUL EOF DIV ADD
--   reduce production e -> e REC

State 8:
## Known stack suffix:
## e MUL
## LR(1) items:
e -> e MUL . e [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 1
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On e shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## e MUL e
## LR(1) items:
e -> e . ADD e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . SUB e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . MUL e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e MUL e . [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . DIV e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . REC [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On REC shift to state 7
## Reductions:
-- On SUB RPAR MUL EOF DIV ADD
--   reduce production e -> e MUL e

State 10:
## Known stack suffix:
## e DIV
## LR(1) items:
e -> e DIV . e [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 1
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On e shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## e DIV e
## LR(1) items:
e -> e . ADD e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . SUB e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . MUL e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . DIV e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e DIV e . [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . REC [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On REC shift to state 7
## Reductions:
-- On SUB RPAR MUL EOF DIV ADD
--   reduce production e -> e DIV e

State 12:
## Known stack suffix:
## LPAR e RPAR
## LR(1) items:
e -> LPAR e RPAR . [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
## Reductions:
-- On SUB RPAR REC MUL EOF DIV ADD
--   reduce production e -> LPAR e RPAR

State 13:
## Known stack suffix:
## e ADD
## LR(1) items:
e -> e ADD . e [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 1
-- On LPAR shift to state 2
-- On INT shift to state 3
-- On e shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## e ADD e
## LR(1) items:
e -> e . ADD e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e ADD e . [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . SUB e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . MUL e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . DIV e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . REC [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
-- On REC shift to state 7
-- On MUL shift to state 8
-- On DIV shift to state 10
## Reductions:
-- On SUB RPAR EOF ADD
--   reduce production e -> e ADD e

State 15:
## Known stack suffix:
## SUB e
## LR(1) items:
e -> e . ADD e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . SUB e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> SUB e . [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . MUL e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . DIV e [ SUB RPAR REC MUL EOF DIV ADD ]
e -> e . REC [ SUB RPAR REC MUL EOF DIV ADD ]
## Transitions:
## Reductions:
-- On SUB RPAR REC MUL EOF DIV ADD
--   reduce production e -> SUB e

State 16:
## Known stack suffix:
## EOF
## LR(1) items:
main -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> EOF

State 17:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

State 18:
## Known stack suffix:
## e
## LR(1) items:
e -> e . ADD e [ SUB REC MUL EOF DIV ADD ]
e -> e . SUB e [ SUB REC MUL EOF DIV ADD ]
e -> e . MUL e [ SUB REC MUL EOF DIV ADD ]
e -> e . DIV e [ SUB REC MUL EOF DIV ADD ]
e -> e . REC [ SUB REC MUL EOF DIV ADD ]
main -> e . EOF [ # ]
## Transitions:
-- On SUB shift to state 5
-- On REC shift to state 7
-- On MUL shift to state 8
-- On EOF shift to state 19
-- On DIV shift to state 10
-- On ADD shift to state 13
## Reductions:

State 19:
## Known stack suffix:
## e EOF
## LR(1) items:
main -> e EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> e EOF

